"""

Permutations & Combinations

"""

"""

-- itertools is a Python module that provides functions for creating iterators for efficient looping. One of these functions is itertools.permutations
-- How permutations are generated
    
   for perm in itertools.permutations(a):
    print(''.join(perm))
     -- For a string of length n, itertools.permutations(a) generates n! (factorial of n) permutations.
     -- e.g. For the string 'ABCD', there are 4! = 24 permutations.
     -- itertools.permutations(a):
            -- This function generates all possible permutations of the string a.
            -- Each permutation is returned as a tuple of characters.
            -- For a string of length n, itertools.permutations(a) generates n! (factorial of n) permutations.
            -- For the string 'ABCD', there are 4! = 24 permutations.
               
    -- for perm in itertools.permutations(a):
           -- This for loop iterates over each permutation generated by itertools.permutations.
           -- perm is a tuple containing a permutation of the characters of a.

    -- ''.join(perm):
          -- This joins the tuple of characters into a single string.
          -- The join() method concatenates the elements of the tuple into a string with no separator (i.e., '').

    -- print(''.join(perm)):
          -- Prints each permutation as a string. 

   -- Summary
        -- itertools.permutations(a): Generates all possible permutations of the string a.
        -- Permutations: Are all possible arrangements of the characters in the string where the order of characters matters.
        -- Output: Each permutation is printed as a string after joining the characters in each tuple.

"""


import itertools

# String
a = 'ABCD'

# Generating permutations
print("Permutations:")
for perm in itertools.permutations(a):
    print(''.join(perm))

# Generating combinations
print("\nCombinations:")
for r in range(1, len(a) + 1):
    for comb in itertools.combinations(a, r):
        print(''.join(comb))
